

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr 04 22:38:36 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 2.05
    18                           ; Generated 20/12/2018 GMT
    19                           ; 
    20                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _LATD	set	3980
    52  0000                     _LATCbits	set	3979
    53  0000                     _ADCON1	set	4033
    54  0000                     _TRISCbits	set	3988
    55  0000                     _TRISD	set	3989
    56  0000                     _TRISB	set	3987
    57  0000                     _PORTB	set	3969
    58  0000                     _PORTBbits	set	3969
    59  0000                     _LATBbits	set	3978
    60                           
    61                           ; #config settings
    62                           
    63                           	psect	cinit
    64  007D46                     __pcinit:
    65                           	opt callstack 0
    66  007D46                     start_initialization:
    67                           	opt callstack 0
    68  007D46                     __initialization:
    69                           	opt callstack 0
    70  007D46                     end_of_initialization:
    71                           	opt callstack 0
    72  007D46                     __end_of__initialization:
    73                           	opt callstack 0
    74  007D46  0100               	movlb	0
    75  007D48  EFC2  F03E         	goto	_main	;jump to C main() function
    76                           
    77                           	psect	cstackCOMRAM
    78  000001                     __pcstackCOMRAM:
    79                           	opt callstack 0
    80  000001                     ??_inicia_lcd:
    81  000001                     ??_envia_char:
    82  000001                     ??_keypad_scanner:
    83  000001                     
    84                           ; 1 bytes @ 0x0
    85  000001                     	ds	2
    86  000003                     switch_press_scan@key:
    87                           	opt callstack 0
    88  000003                     envia_char@dado:
    89                           	opt callstack 0
    90                           
    91                           ; 1 bytes @ 0x2
    92  000003                     	ds	1
    93  000004                     main@key:
    94                           	opt callstack 0
    95                           
    96                           ; 1 bytes @ 0x3
    97  000004                     	ds	1
    98                           
    99 ;;
   100 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   101 ;;
   102 ;; *************** function _main *****************
   103 ;; Defined at:
   104 ;;		line 39 in file "main.c"
   105 ;; Parameters:    Size  Location     Type
   106 ;;		None
   107 ;; Auto vars:     Size  Location     Type
   108 ;;  key             1    3[COMRAM] unsigned char 
   109 ;; Return value:  Size  Location     Type
   110 ;;                  1    wreg      void 
   111 ;; Registers used:
   112 ;;		wreg, status,2, status,0, cstack
   113 ;; Tracked objects:
   114 ;;		On entry : 0/0
   115 ;;		On exit  : 0/0
   116 ;;		Unchanged: 0/0
   117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   118 ;;      Params:         0       0       0       0       0       0       0       0       0
   119 ;;      Locals:         1       0       0       0       0       0       0       0       0
   120 ;;      Temps:          0       0       0       0       0       0       0       0       0
   121 ;;      Totals:         1       0       0       0       0       0       0       0       0
   122 ;;Total ram usage:        1 bytes
   123 ;; Hardware stack levels required when called:    2
   124 ;; This function calls:
   125 ;;		_envia_char
   126 ;;		_inicia_lcd
   127 ;;		_initKeypad
   128 ;;		_setup
   129 ;;		_switch_press_scan
   130 ;; This function is called by:
   131 ;;		Startup code after reset
   132 ;; This function uses a non-reentrant model
   133 ;;
   134                           
   135                           	psect	text0
   136  007D84                     __ptext0:
   137                           	opt callstack 0
   138  007D84                     _main:
   139                           	opt callstack 29
   140                           
   141                           ;main.c: 40:     setup();
   142                           
   143                           ;incstack = 0
   144  007D84  ECB6  F03E         	call	_setup	;wreg free
   145                           
   146                           ;main.c: 41:     initKeypad();
   147  007D88  ECA6  F03E         	call	_initKeypad	;wreg free
   148                           
   149                           ;main.c: 42:     inicia_lcd();
   150  007D8C  ECE3  F03E         	call	_inicia_lcd	;wreg free
   151  007D90                     
   152                           ;main.c: 45:         key = switch_press_scan();
   153  007D90  ECAB  F03E         	call	_switch_press_scan	;wreg free
   154  007D94  6E04               	movwf	main@key,c
   155                           
   156                           ;main.c: 46:         envia_char(key);
   157  007D96  5004               	movf	main@key,w,c
   158  007D98  ECCF  F03E         	call	_envia_char
   159  007D9C  D7F9               	goto	l878
   160  007D9E                     __end_of_main:
   161                           	opt callstack 0
   162                           
   163 ;; *************** function _switch_press_scan *****************
   164 ;; Defined at:
   165 ;;		line 53 in file "main.c"
   166 ;; Parameters:    Size  Location     Type
   167 ;;		None
   168 ;; Auto vars:     Size  Location     Type
   169 ;;  key             1    2[COMRAM] unsigned char 
   170 ;; Return value:  Size  Location     Type
   171 ;;                  1    wreg      unsigned char 
   172 ;; Registers used:
   173 ;;		wreg, status,2, status,0, cstack
   174 ;; Tracked objects:
   175 ;;		On entry : 0/0
   176 ;;		On exit  : 0/0
   177 ;;		Unchanged: 0/0
   178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   179 ;;      Params:         0       0       0       0       0       0       0       0       0
   180 ;;      Locals:         1       0       0       0       0       0       0       0       0
   181 ;;      Temps:          0       0       0       0       0       0       0       0       0
   182 ;;      Totals:         1       0       0       0       0       0       0       0       0
   183 ;;Total ram usage:        1 bytes
   184 ;; Hardware stack levels used:    1
   185 ;; Hardware stack levels required when called:    1
   186 ;; This function calls:
   187 ;;		_keypad_scanner
   188 ;; This function is called by:
   189 ;;		_main
   190 ;; This function uses a non-reentrant model
   191 ;;
   192                           
   193                           	psect	text1
   194  007D56                     __ptext1:
   195                           	opt callstack 0
   196  007D56                     _switch_press_scan:
   197                           	opt callstack 29
   198                           
   199                           ;main.c: 54:     char key = 'n';
   200                           
   201                           ;incstack = 0
   202  007D56  0E6E               	movlw	110
   203  007D58  D002               	goto	L1
   204  007D5A                     l858:
   205                           
   206                           ;main.c: 56:     key = keypad_scanner();
   207  007D5A  EC2E  F03F         	call	_keypad_scanner	;wreg free
   208  007D5E                     L1:
   209  007D5E  6E03               	movwf	switch_press_scan@key,c
   210                           
   211                           ;main.c: 55:     while(key=='n')
   212  007D60  0E6E               	movlw	110
   213  007D62  1803               	xorwf	switch_press_scan@key,w,c
   214  007D64  B4D8               	btfsc	status,2,c
   215  007D66  D7F9               	goto	l858
   216                           
   217                           ;main.c: 57:     return key;
   218  007D68  5003               	movf	switch_press_scan@key,w,c
   219  007D6A  0012               	return		;funcret
   220  007D6C                     __end_of_switch_press_scan:
   221                           	opt callstack 0
   222                           
   223 ;; *************** function _keypad_scanner *****************
   224 ;; Defined at:
   225 ;;		line 60 in file "main.c"
   226 ;; Parameters:    Size  Location     Type
   227 ;;		None
   228 ;; Auto vars:     Size  Location     Type
   229 ;;		None
   230 ;; Return value:  Size  Location     Type
   231 ;;                  1    wreg      unsigned char 
   232 ;; Registers used:
   233 ;;		wreg
   234 ;; Tracked objects:
   235 ;;		On entry : 0/0
   236 ;;		On exit  : 0/0
   237 ;;		Unchanged: 0/0
   238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   239 ;;      Params:         0       0       0       0       0       0       0       0       0
   240 ;;      Locals:         0       0       0       0       0       0       0       0       0
   241 ;;      Temps:          2       0       0       0       0       0       0       0       0
   242 ;;      Totals:         2       0       0       0       0       0       0       0       0
   243 ;;Total ram usage:        2 bytes
   244 ;; Hardware stack levels used:    1
   245 ;; This function calls:
   246 ;;		Nothing
   247 ;; This function is called by:
   248 ;;		_switch_press_scan
   249 ;; This function uses a non-reentrant model
   250 ;;
   251                           
   252                           	psect	text2
   253  007E5C                     __ptext2:
   254                           	opt callstack 0
   255  007E5C                     _keypad_scanner:
   256                           	opt callstack 29
   257                           
   258                           ;main.c: 61:     LATBbits.LATB0 = 0; LATBbits.LATB1 = 1; LATBbits.LATB2 = 1; LATBbits.LA
      +                          TB3 = 1;
   259                           
   260                           ;incstack = 0
   261  007E5C  908A               	bcf	3978,0,c	;volatile
   262  007E5E  828A               	bsf	3978,1,c	;volatile
   263  007E60  848A               	bsf	3978,2,c	;volatile
   264  007E62  868A               	bsf	3978,3,c	;volatile
   265                           
   266                           ;main.c: 62:     if (PORTBbits.RB4 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '1'; }
   267  007E64  B881               	btfsc	3969,4,c	;volatile
   268  007E66  D00E               	goto	l51
   269  007E68  0E02               	movlw	2
   270  007E6A  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   271  007E6C  0E04               	movlw	4
   272  007E6E  6E01               	movwf	??_keypad_scanner& (0+255),c
   273  007E70  0EBA               	movlw	186
   274  007E72                     u157:
   275  007E72  2EE8               	decfsz	wreg,f,c
   276  007E74  D7FE               	bra	u157
   277  007E76  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   278  007E78  D7FC               	bra	u157
   279  007E7A  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   280  007E7C  D7FA               	bra	u157
   281  007E7E  D000               	nop2	
   282  007E80  0E31               	movlw	49
   283  007E82  0012               	return	
   284  007E84                     l51:
   285                           
   286                           ;main.c: 63:     if (PORTBbits.RB5 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '2'; }
   287  007E84  BA81               	btfsc	3969,5,c	;volatile
   288  007E86  D00E               	goto	l53
   289  007E88  0E02               	movlw	2
   290  007E8A  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   291  007E8C  0E04               	movlw	4
   292  007E8E  6E01               	movwf	??_keypad_scanner& (0+255),c
   293  007E90  0EBA               	movlw	186
   294  007E92                     u167:
   295  007E92  2EE8               	decfsz	wreg,f,c
   296  007E94  D7FE               	bra	u167
   297  007E96  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   298  007E98  D7FC               	bra	u167
   299  007E9A  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   300  007E9C  D7FA               	bra	u167
   301  007E9E  D000               	nop2	
   302  007EA0  0E32               	movlw	50
   303  007EA2  0012               	return	
   304  007EA4                     l53:
   305                           
   306                           ;main.c: 64:     if (PORTBbits.RB6 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '3'; }
   307  007EA4  BC81               	btfsc	3969,6,c	;volatile
   308  007EA6  D00E               	goto	l54
   309  007EA8  0E02               	movlw	2
   310  007EAA  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   311  007EAC  0E04               	movlw	4
   312  007EAE  6E01               	movwf	??_keypad_scanner& (0+255),c
   313  007EB0  0EBA               	movlw	186
   314  007EB2                     u177:
   315  007EB2  2EE8               	decfsz	wreg,f,c
   316  007EB4  D7FE               	bra	u177
   317  007EB6  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   318  007EB8  D7FC               	bra	u177
   319  007EBA  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   320  007EBC  D7FA               	bra	u177
   321  007EBE  D000               	nop2	
   322  007EC0  0E33               	movlw	51
   323  007EC2  0012               	return	
   324  007EC4                     l54:
   325                           
   326                           ;main.c: 66:     LATBbits.LATB0 = 1; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LA
      +                          TB3 = 1;
   327  007EC4  808A               	bsf	3978,0,c	;volatile
   328  007EC6  928A               	bcf	3978,1,c	;volatile
   329  007EC8  848A               	bsf	3978,2,c	;volatile
   330  007ECA  868A               	bsf	3978,3,c	;volatile
   331                           
   332                           ;main.c: 67:     if (PORTBbits.RB4 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '4'; }
   333  007ECC  B881               	btfsc	3969,4,c	;volatile
   334  007ECE  D00E               	goto	l55
   335  007ED0  0E02               	movlw	2
   336  007ED2  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   337  007ED4  0E04               	movlw	4
   338  007ED6  6E01               	movwf	??_keypad_scanner& (0+255),c
   339  007ED8  0EBA               	movlw	186
   340  007EDA                     u187:
   341  007EDA  2EE8               	decfsz	wreg,f,c
   342  007EDC  D7FE               	bra	u187
   343  007EDE  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   344  007EE0  D7FC               	bra	u187
   345  007EE2  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   346  007EE4  D7FA               	bra	u187
   347  007EE6  D000               	nop2	
   348  007EE8  0E34               	movlw	52
   349  007EEA  0012               	return	
   350  007EEC                     l55:
   351                           
   352                           ;main.c: 68:     if (PORTBbits.RB5 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '5'; }
   353  007EEC  BA81               	btfsc	3969,5,c	;volatile
   354  007EEE  D00E               	goto	l56
   355  007EF0  0E02               	movlw	2
   356  007EF2  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   357  007EF4  0E04               	movlw	4
   358  007EF6  6E01               	movwf	??_keypad_scanner& (0+255),c
   359  007EF8  0EBA               	movlw	186
   360  007EFA                     u197:
   361  007EFA  2EE8               	decfsz	wreg,f,c
   362  007EFC  D7FE               	bra	u197
   363  007EFE  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   364  007F00  D7FC               	bra	u197
   365  007F02  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   366  007F04  D7FA               	bra	u197
   367  007F06  D000               	nop2	
   368  007F08  0E35               	movlw	53
   369  007F0A  0012               	return	
   370  007F0C                     l56:
   371                           
   372                           ;main.c: 69:     if (PORTBbits.RB6 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '6'; }
   373  007F0C  BC81               	btfsc	3969,6,c	;volatile
   374  007F0E  D00E               	goto	l57
   375  007F10  0E02               	movlw	2
   376  007F12  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   377  007F14  0E04               	movlw	4
   378  007F16  6E01               	movwf	??_keypad_scanner& (0+255),c
   379  007F18  0EBA               	movlw	186
   380  007F1A                     u207:
   381  007F1A  2EE8               	decfsz	wreg,f,c
   382  007F1C  D7FE               	bra	u207
   383  007F1E  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   384  007F20  D7FC               	bra	u207
   385  007F22  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   386  007F24  D7FA               	bra	u207
   387  007F26  D000               	nop2	
   388  007F28  0E36               	movlw	54
   389  007F2A  0012               	return	
   390  007F2C                     l57:
   391                           
   392                           ;main.c: 71:     LATBbits.LATB0 = 1; LATBbits.LATB1 = 1; LATBbits.LATB2 = 0; LATBbits.LA
      +                          TB3 = 1;
   393  007F2C  808A               	bsf	3978,0,c	;volatile
   394  007F2E  828A               	bsf	3978,1,c	;volatile
   395  007F30  948A               	bcf	3978,2,c	;volatile
   396  007F32  868A               	bsf	3978,3,c	;volatile
   397                           
   398                           ;main.c: 72:     if (PORTBbits.RB4 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '7'; }
   399  007F34  B881               	btfsc	3969,4,c	;volatile
   400  007F36  D00E               	goto	l58
   401  007F38  0E02               	movlw	2
   402  007F3A  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   403  007F3C  0E04               	movlw	4
   404  007F3E  6E01               	movwf	??_keypad_scanner& (0+255),c
   405  007F40  0EBA               	movlw	186
   406  007F42                     u217:
   407  007F42  2EE8               	decfsz	wreg,f,c
   408  007F44  D7FE               	bra	u217
   409  007F46  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   410  007F48  D7FC               	bra	u217
   411  007F4A  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   412  007F4C  D7FA               	bra	u217
   413  007F4E  D000               	nop2	
   414  007F50  0E37               	movlw	55
   415  007F52  0012               	return	
   416  007F54                     l58:
   417                           
   418                           ;main.c: 73:     if (PORTBbits.RB5 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '8'; }
   419  007F54  BA81               	btfsc	3969,5,c	;volatile
   420  007F56  D00E               	goto	l59
   421  007F58  0E02               	movlw	2
   422  007F5A  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   423  007F5C  0E04               	movlw	4
   424  007F5E  6E01               	movwf	??_keypad_scanner& (0+255),c
   425  007F60  0EBA               	movlw	186
   426  007F62                     u227:
   427  007F62  2EE8               	decfsz	wreg,f,c
   428  007F64  D7FE               	bra	u227
   429  007F66  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   430  007F68  D7FC               	bra	u227
   431  007F6A  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   432  007F6C  D7FA               	bra	u227
   433  007F6E  D000               	nop2	
   434  007F70  0E38               	movlw	56
   435  007F72  0012               	return	
   436  007F74                     l59:
   437                           
   438                           ;main.c: 74:     if (PORTBbits.RB6 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '9'; }
   439  007F74  BC81               	btfsc	3969,6,c	;volatile
   440  007F76  D00E               	goto	l60
   441  007F78  0E02               	movlw	2
   442  007F7A  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   443  007F7C  0E04               	movlw	4
   444  007F7E  6E01               	movwf	??_keypad_scanner& (0+255),c
   445  007F80  0EBA               	movlw	186
   446  007F82                     u237:
   447  007F82  2EE8               	decfsz	wreg,f,c
   448  007F84  D7FE               	bra	u237
   449  007F86  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   450  007F88  D7FC               	bra	u237
   451  007F8A  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   452  007F8C  D7FA               	bra	u237
   453  007F8E  D000               	nop2	
   454  007F90  0E39               	movlw	57
   455  007F92  0012               	return	
   456  007F94                     l60:
   457                           
   458                           ;main.c: 76:     LATBbits.LATB0 = 1; LATBbits.LATB1 = 1; LATBbits.LATB2 = 1; LATBbits.LA
      +                          TB3 = 0;
   459  007F94  808A               	bsf	3978,0,c	;volatile
   460  007F96  828A               	bsf	3978,1,c	;volatile
   461  007F98  848A               	bsf	3978,2,c	;volatile
   462  007F9A  968A               	bcf	3978,3,c	;volatile
   463                           
   464                           ;main.c: 77:     if (PORTBbits.RB4 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '*'; }
   465  007F9C  B881               	btfsc	3969,4,c	;volatile
   466  007F9E  D00E               	goto	l61
   467  007FA0  0E02               	movlw	2
   468  007FA2  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   469  007FA4  0E04               	movlw	4
   470  007FA6  6E01               	movwf	??_keypad_scanner& (0+255),c
   471  007FA8  0EBA               	movlw	186
   472  007FAA                     u247:
   473  007FAA  2EE8               	decfsz	wreg,f,c
   474  007FAC  D7FE               	bra	u247
   475  007FAE  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   476  007FB0  D7FC               	bra	u247
   477  007FB2  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   478  007FB4  D7FA               	bra	u247
   479  007FB6  D000               	nop2	
   480  007FB8  0E2A               	movlw	42
   481  007FBA  0012               	return	
   482  007FBC                     l61:
   483                           
   484                           ;main.c: 78:     if (PORTBbits.RB5 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '0'; }
   485  007FBC  BA81               	btfsc	3969,5,c	;volatile
   486  007FBE  D00E               	goto	l62
   487  007FC0  0E02               	movlw	2
   488  007FC2  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   489  007FC4  0E04               	movlw	4
   490  007FC6  6E01               	movwf	??_keypad_scanner& (0+255),c
   491  007FC8  0EBA               	movlw	186
   492  007FCA                     u257:
   493  007FCA  2EE8               	decfsz	wreg,f,c
   494  007FCC  D7FE               	bra	u257
   495  007FCE  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   496  007FD0  D7FC               	bra	u257
   497  007FD2  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   498  007FD4  D7FA               	bra	u257
   499  007FD6  D000               	nop2	
   500  007FD8  0E30               	movlw	48
   501  007FDA  0012               	return	
   502  007FDC                     l62:
   503                           
   504                           ;main.c: 79:     if (PORTBbits.RB6 == 0) { _delay((unsigned long)((100)*(8000000/4000.0)
      +                          )); return '#'; }
   505  007FDC  BC81               	btfsc	3969,6,c	;volatile
   506  007FDE  D00E               	goto	l816
   507  007FE0  0E02               	movlw	2
   508  007FE2  6E02               	movwf	(??_keypad_scanner+1)& (0+255),c
   509  007FE4  0E04               	movlw	4
   510  007FE6  6E01               	movwf	??_keypad_scanner& (0+255),c
   511  007FE8  0EBA               	movlw	186
   512  007FEA                     u267:
   513  007FEA  2EE8               	decfsz	wreg,f,c
   514  007FEC  D7FE               	bra	u267
   515  007FEE  2E01               	decfsz	??_keypad_scanner& (0+255),f,c
   516  007FF0  D7FC               	bra	u267
   517  007FF2  2E02               	decfsz	(??_keypad_scanner+1)& (0+255),f,c
   518  007FF4  D7FA               	bra	u267
   519  007FF6  D000               	nop2	
   520  007FF8  0E23               	movlw	35
   521  007FFA  0012               	return	
   522  007FFC                     l816:
   523                           
   524                           ;main.c: 81:     return 'n';
   525  007FFC  0E6E               	movlw	110
   526  007FFE  0012               	return		;funcret
   527  008000                     __end_of_keypad_scanner:
   528                           	opt callstack 0
   529                           
   530 ;; *************** function _setup *****************
   531 ;; Defined at:
   532 ;;		line 89 in file "main.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;		None
   535 ;; Auto vars:     Size  Location     Type
   536 ;;		None
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, status,2
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   546 ;;      Params:         0       0       0       0       0       0       0       0       0
   547 ;;      Locals:         0       0       0       0       0       0       0       0       0
   548 ;;      Temps:          0       0       0       0       0       0       0       0       0
   549 ;;      Totals:         0       0       0       0       0       0       0       0       0
   550 ;;Total ram usage:        0 bytes
   551 ;; Hardware stack levels used:    1
   552 ;; This function calls:
   553 ;;		Nothing
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559                           	psect	text3
   560  007D6C                     __ptext3:
   561                           	opt callstack 0
   562  007D6C                     _setup:
   563                           	opt callstack 30
   564                           
   565                           ;main.c: 90:     PORTB = 0b11100000;
   566                           
   567                           ;incstack = 0
   568  007D6C  0EE0               	movlw	224
   569  007D6E  6E81               	movwf	3969,c	;volatile
   570                           
   571                           ;main.c: 91:     TRISB = 0xF0;
   572  007D70  0EF0               	movlw	240
   573  007D72  6E93               	movwf	3987,c	;volatile
   574                           
   575                           ;main.c: 92:     TRISD = 0b00000000;
   576  007D74  0E00               	movlw	0
   577  007D76  6E95               	movwf	3989,c	;volatile
   578                           
   579                           ;main.c: 93:     TRISCbits.RC0 = 0;
   580  007D78  9094               	bcf	3988,0,c	;volatile
   581                           
   582                           ;main.c: 94:     TRISCbits.RC1 = 0;
   583  007D7A  9294               	bcf	3988,1,c	;volatile
   584                           
   585                           ;main.c: 95:     TRISCbits.RC2 = 0;
   586  007D7C  9494               	bcf	3988,2,c	;volatile
   587                           
   588                           ;main.c: 96:     ADCON1 = 0x0F;
   589  007D7E  0E0F               	movlw	15
   590  007D80  6EC1               	movwf	4033,c	;volatile
   591  007D82  0012               	return		;funcret
   592  007D84                     __end_of_setup:
   593                           	opt callstack 0
   594                           
   595 ;; *************** function _initKeypad *****************
   596 ;; Defined at:
   597 ;;		line 84 in file "main.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		wreg, status,2
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   611 ;;      Params:         0       0       0       0       0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0       0       0       0       0
   614 ;;      Totals:         0       0       0       0       0       0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; This function calls:
   618 ;;		Nothing
   619 ;; This function is called by:
   620 ;;		_main
   621 ;; This function uses a non-reentrant model
   622 ;;
   623                           
   624                           	psect	text4
   625  007D4C                     __ptext4:
   626                           	opt callstack 0
   627  007D4C                     _initKeypad:
   628                           	opt callstack 30
   629                           
   630                           ;main.c: 85:     PORTB = 0x00;
   631                           
   632                           ;incstack = 0
   633  007D4C  0E00               	movlw	0
   634  007D4E  6E81               	movwf	3969,c	;volatile
   635                           
   636                           ;main.c: 86:     TRISB = 0xF0;
   637  007D50  0EF0               	movlw	240
   638  007D52  6E93               	movwf	3987,c	;volatile
   639  007D54  0012               	return		;funcret
   640  007D56                     __end_of_initKeypad:
   641                           	opt callstack 0
   642                           
   643 ;; *************** function _inicia_lcd *****************
   644 ;; Defined at:
   645 ;;		line 116 in file "main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, status,2
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   659 ;;      Params:         0       0       0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0
   661 ;;      Temps:          2       0       0       0       0       0       0       0       0
   662 ;;      Totals:         2       0       0       0       0       0       0       0       0
   663 ;;Total ram usage:        2 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text5
   673  007DC6                     __ptext5:
   674                           	opt callstack 0
   675  007DC6                     _inicia_lcd:
   676                           	opt callstack 30
   677                           
   678                           ;main.c: 117:     _delay((unsigned long)((100)*(8000000/4000.0)));
   679                           
   680                           ;incstack = 0
   681  007DC6  0E02               	movlw	2
   682  007DC8  6E02               	movwf	(??_inicia_lcd+1)& (0+255),c
   683  007DCA  0E04               	movlw	4
   684  007DCC  6E01               	movwf	??_inicia_lcd& (0+255),c
   685  007DCE  0EBA               	movlw	186
   686  007DD0                     u277:
   687  007DD0  2EE8               	decfsz	wreg,f,c
   688  007DD2  D7FE               	bra	u277
   689  007DD4  2E01               	decfsz	??_inicia_lcd& (0+255),f,c
   690  007DD6  D7FC               	bra	u277
   691  007DD8  2E02               	decfsz	(??_inicia_lcd+1)& (0+255),f,c
   692  007DDA  D7FA               	bra	u277
   693  007DDC  D000               	nop2	
   694                           
   695                           ;main.c: 118:     LATCbits.LATC2 = 0;
   696  007DDE  948B               	bcf	3979,2,c	;volatile
   697                           
   698                           ;main.c: 119:     LATCbits.LATC0 = 0;
   699  007DE0  908B               	bcf	3979,0,c	;volatile
   700                           
   701                           ;main.c: 120:     LATD = 0b00111100;
   702  007DE2  0E3C               	movlw	60
   703  007DE4  6E8C               	movwf	3980,c	;volatile
   704                           
   705                           ;main.c: 121:     _delay((unsigned long)((100)*(8000000/4000.0)));
   706  007DE6  0E02               	movlw	2
   707  007DE8  6E02               	movwf	(??_inicia_lcd+1)& (0+255),c
   708  007DEA  0E04               	movlw	4
   709  007DEC  6E01               	movwf	??_inicia_lcd& (0+255),c
   710  007DEE  0EBA               	movlw	186
   711  007DF0                     u287:
   712  007DF0  2EE8               	decfsz	wreg,f,c
   713  007DF2  D7FE               	bra	u287
   714  007DF4  2E01               	decfsz	??_inicia_lcd& (0+255),f,c
   715  007DF6  D7FC               	bra	u287
   716  007DF8  2E02               	decfsz	(??_inicia_lcd+1)& (0+255),f,c
   717  007DFA  D7FA               	bra	u287
   718  007DFC  D000               	nop2	
   719                           
   720                           ;main.c: 122:     LATCbits.LATC2 = 1;
   721  007DFE  848B               	bsf	3979,2,c	;volatile
   722                           
   723                           ;main.c: 123:     LATCbits.LATC2 = 0;
   724  007E00  948B               	bcf	3979,2,c	;volatile
   725                           
   726                           ;main.c: 124:     LATD = 0b00001111;
   727  007E02  0E0F               	movlw	15
   728  007E04  6E8C               	movwf	3980,c	;volatile
   729                           
   730                           ;main.c: 125:     _delay((unsigned long)((100)*(8000000/4000.0)));
   731  007E06  0E02               	movlw	2
   732  007E08  6E02               	movwf	(??_inicia_lcd+1)& (0+255),c
   733  007E0A  0E04               	movlw	4
   734  007E0C  6E01               	movwf	??_inicia_lcd& (0+255),c
   735  007E0E  0EBA               	movlw	186
   736  007E10                     u297:
   737  007E10  2EE8               	decfsz	wreg,f,c
   738  007E12  D7FE               	bra	u297
   739  007E14  2E01               	decfsz	??_inicia_lcd& (0+255),f,c
   740  007E16  D7FC               	bra	u297
   741  007E18  2E02               	decfsz	(??_inicia_lcd+1)& (0+255),f,c
   742  007E1A  D7FA               	bra	u297
   743  007E1C  D000               	nop2	
   744                           
   745                           ;main.c: 126:     LATCbits.LATC2 = 1;
   746  007E1E  848B               	bsf	3979,2,c	;volatile
   747                           
   748                           ;main.c: 127:     LATCbits.LATC2 = 0;
   749  007E20  948B               	bcf	3979,2,c	;volatile
   750                           
   751                           ;main.c: 128:     LATD = 0b00000001;
   752  007E22  0E01               	movlw	1
   753  007E24  6E8C               	movwf	3980,c	;volatile
   754                           
   755                           ;main.c: 129:     _delay((unsigned long)((100)*(8000000/4000.0)));
   756  007E26  0E02               	movlw	2
   757  007E28  6E02               	movwf	(??_inicia_lcd+1)& (0+255),c
   758  007E2A  0E04               	movlw	4
   759  007E2C  6E01               	movwf	??_inicia_lcd& (0+255),c
   760  007E2E  0EBA               	movlw	186
   761  007E30                     u307:
   762  007E30  2EE8               	decfsz	wreg,f,c
   763  007E32  D7FE               	bra	u307
   764  007E34  2E01               	decfsz	??_inicia_lcd& (0+255),f,c
   765  007E36  D7FC               	bra	u307
   766  007E38  2E02               	decfsz	(??_inicia_lcd+1)& (0+255),f,c
   767  007E3A  D7FA               	bra	u307
   768  007E3C  D000               	nop2	
   769                           
   770                           ;main.c: 130:     LATCbits.LATC2 = 1;
   771  007E3E  848B               	bsf	3979,2,c	;volatile
   772                           
   773                           ;main.c: 131:     LATCbits.LATC2 = 0;
   774  007E40  948B               	bcf	3979,2,c	;volatile
   775                           
   776                           ;main.c: 132:     _delay((unsigned long)((100)*(8000000/4000.0)));
   777  007E42  0E02               	movlw	2
   778  007E44  6E02               	movwf	(??_inicia_lcd+1)& (0+255),c
   779  007E46  0E04               	movlw	4
   780  007E48  6E01               	movwf	??_inicia_lcd& (0+255),c
   781  007E4A  0EBA               	movlw	186
   782  007E4C                     u317:
   783  007E4C  2EE8               	decfsz	wreg,f,c
   784  007E4E  D7FE               	bra	u317
   785  007E50  2E01               	decfsz	??_inicia_lcd& (0+255),f,c
   786  007E52  D7FC               	bra	u317
   787  007E54  2E02               	decfsz	(??_inicia_lcd+1)& (0+255),f,c
   788  007E56  D7FA               	bra	u317
   789  007E58  D000               	nop2	
   790  007E5A  0012               	return		;funcret
   791  007E5C                     __end_of_inicia_lcd:
   792                           	opt callstack 0
   793                           
   794 ;; *************** function _envia_char *****************
   795 ;; Defined at:
   796 ;;		line 99 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  dado            1    wreg     unsigned char 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  dado            1    2[COMRAM] unsigned char 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, status,2, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   810 ;;      Params:         0       0       0       0       0       0       0       0       0
   811 ;;      Locals:         1       0       0       0       0       0       0       0       0
   812 ;;      Temps:          2       0       0       0       0       0       0       0       0
   813 ;;      Totals:         3       0       0       0       0       0       0       0       0
   814 ;;Total ram usage:        3 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		_main
   820 ;;		_envia_frase
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	text6
   825  007D9E                     __ptext6:
   826                           	opt callstack 0
   827  007D9E                     _envia_char:
   828                           	opt callstack 30
   829                           
   830                           ;incstack = 0
   831                           ;envia_char@dado stored from wreg
   832  007D9E  6E03               	movwf	envia_char@dado,c
   833                           
   834                           ;main.c: 100:     LATCbits.LATC2 = 0;
   835  007DA0  948B               	bcf	3979,2,c	;volatile
   836                           
   837                           ;main.c: 101:     LATCbits.LATC0 = 1;
   838  007DA2  808B               	bsf	3979,0,c	;volatile
   839                           
   840                           ;main.c: 102:     LATD = dado;
   841  007DA4  C003  FF8C         	movff	envia_char@dado,3980	;volatile
   842                           
   843                           ;main.c: 103:     LATCbits.LATC2 = 1;
   844  007DA8  848B               	bsf	3979,2,c	;volatile
   845                           
   846                           ;main.c: 104:     LATCbits.LATC2 = 0;
   847  007DAA  948B               	bcf	3979,2,c	;volatile
   848                           
   849                           ;main.c: 105:     _delay((unsigned long)((100)*(8000000/4000.0)));
   850  007DAC  0E02               	movlw	2
   851  007DAE  6E02               	movwf	(??_envia_char+1)& (0+255),c
   852  007DB0  0E04               	movlw	4
   853  007DB2  6E01               	movwf	??_envia_char& (0+255),c
   854  007DB4  0EBA               	movlw	186
   855  007DB6                     u327:
   856  007DB6  2EE8               	decfsz	wreg,f,c
   857  007DB8  D7FE               	bra	u327
   858  007DBA  2E01               	decfsz	??_envia_char& (0+255),f,c
   859  007DBC  D7FC               	bra	u327
   860  007DBE  2E02               	decfsz	(??_envia_char+1)& (0+255),f,c
   861  007DC0  D7FA               	bra	u327
   862  007DC2  D000               	nop2	
   863  007DC4  0012               	return		;funcret
   864  007DC6                     __end_of_envia_char:
   865                           	opt callstack 0
   866  0000                     
   867                           	psect	rparam
   868  0000                     tosu	equ	0xFFF
   869                           tosh	equ	0xFFE
   870                           tosl	equ	0xFFD
   871                           stkptr	equ	0xFFC
   872                           pclatu	equ	0xFFB
   873                           pclath	equ	0xFFA
   874                           pcl	equ	0xFF9
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           prodh	equ	0xFF4
   880                           prodl	equ	0xFF3
   881                           indf0	equ	0xFEF
   882                           postinc0	equ	0xFEE
   883                           postdec0	equ	0xFED
   884                           preinc0	equ	0xFEC
   885                           plusw0	equ	0xFEB
   886                           fsr0h	equ	0xFEA
   887                           fsr0l	equ	0xFE9
   888                           wreg	equ	0xFE8
   889                           indf1	equ	0xFE7
   890                           postinc1	equ	0xFE6
   891                           postdec1	equ	0xFE5
   892                           preinc1	equ	0xFE4
   893                           plusw1	equ	0xFE3
   894                           fsr1h	equ	0xFE2
   895                           fsr1l	equ	0xFE1
   896                           bsr	equ	0xFE0
   897                           indf2	equ	0xFDF
   898                           postinc2	equ	0xFDE
   899                           postdec2	equ	0xFDD
   900                           preinc2	equ	0xFDC
   901                           plusw2	equ	0xFDB
   902                           fsr2h	equ	0xFDA
   903                           fsr2l	equ	0xFD9
   904                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      4       4
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_envia_char
    _main->_switch_press_scan
    _switch_press_scan->_keypad_scanner

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      60
                                              3 COMRAM     1     1      0
                         _envia_char
                         _inicia_lcd
                         _initKeypad
                              _setup
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (1) _switch_press_scan                                    1     1      0      30
                                              2 COMRAM     1     1      0
                     _keypad_scanner
 ---------------------------------------------------------------------------------
 (2) _keypad_scanner                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inicia_lcd                                           2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _envia_char                                           3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _envia_char
   _inicia_lcd
   _initKeypad
   _setup
   _switch_press_scan
     _keypad_scanner

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      4       4       1        4.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr 04 22:38:36 2019

                        l51 7E84                          l60 7F94                          l61 7FBC  
                        l53 7EA4                          l62 7FDC                          l54 7EC4  
                        l55 7EEC                          l56 7F0C                          l57 7F2C  
                        l58 7F54                          l59 7F74                         l816 7FFC  
                       l858 7D5A                         l878 7D90                         u207 7F1A  
                       u217 7F42                         u307 7E30                         u227 7F62  
                       u317 7E4C                         u237 7F82                         u157 7E72  
                       u327 7DB6                         u247 7FAA                         u167 7E92  
                       u257 7FCA                         u177 7EB2                         u267 7FEA  
                       u187 7EDA                         u277 7DD0                         u197 7EFA  
                       u287 7DF0                         u297 7E10                         wreg 000FE8  
                      _LATD 000F8C                        _main 7D84                        start 0000  
              ___param_bank 000000                       ?_main 0001              envia_char@dado 0003  
                     _PORTB 000F81                       _TRISB 000F93                       _TRISD 000F95  
          ??_keypad_scanner 0001                       _setup 7D6C                       status 000FD8  
           __initialization 7D46                __end_of_main 7D9E                      ??_main 0004  
             __activetblptr 000000                      _ADCON1 000FC1                      ?_setup 0001  
                __accesstop 0060     __end_of__initialization 7D46               ___rparam_used 000001  
            __pcstackCOMRAM 0001               __end_of_setup 7D84                     ??_setup 0001  
                _envia_char 7D9E                     __Hparam 0000                  _inicia_lcd 7DC6  
                   __Lparam 0000                  _initKeypad 7D4C                     __pcinit 7D46  
                   __ramtop 0800                     __ptext0 7D84                     __ptext1 7D56  
                   __ptext2 7E5C                     __ptext3 7D6C                     __ptext4 7D4C  
                   __ptext5 7DC6                     __ptext6 7D9E                     main@key 0004  
      end_of_initialization 7D46                   _PORTBbits 000F81                   _TRISCbits 000F94  
      switch_press_scan@key 0003                 ?_envia_char 0001     __size_of_keypad_scanner 01A4  
               ?_inicia_lcd 0001                 ?_initKeypad 0001         start_initialization 7D46  
       __size_of_envia_char 0028         __size_of_inicia_lcd 0096         __size_of_initKeypad 000A  
            __size_of_setup 0018                    _LATBbits 000F8A                    _LATCbits 000F8B  
            _keypad_scanner 7E5C           _switch_press_scan 7D56          ?_switch_press_scan 0001  
       ??_switch_press_scan 0003      __end_of_keypad_scanner 8000                ??_envia_char 0001  
              ??_inicia_lcd 0001                    __Hrparam 0000                    __Lrparam 0000  
              ??_initKeypad 0001   __end_of_switch_press_scan 7D6C          __end_of_envia_char 7DC6  
        __end_of_inicia_lcd 7E5C          __end_of_initKeypad 7D56             ?_keypad_scanner 0001  
             __size_of_main 001A  __size_of_switch_press_scan 0016  
